import numpy as np
import wave
import struct

file = "10727124.wav"

amplitude = 30000
frequency = 261.6
duration = 1
fs = 44100
num_samples = duration * fs
num_channels = 1
sampwidth = 2
num_frames = num_samples
comptype = "NONE"
compname = "not compressed"
t = np.linspace( 0, duration, num_samples, endpoint = False )
C = amplitude * np.cos(2*np.pi*frequency*t)

amplitude = 30000
frequency = 523.3
duration = 1
fs = 44100
num_samples = duration * fs
num_channels = 1
sampwidth = 2
num_frames = num_samples
comptype = "NONE"
compname = "not compressed"
t = np.linspace( 0, duration, num_samples, endpoint = False )
Cplus = amplitude * np.cos(2*np.pi*frequency*t)

amplitude = 30000
frequency = 293.7
duration = 1
fs = 44100
num_samples = duration * fs
num_channels = 1
sampwidth = 2
num_frames = num_samples
comptype = "NONE"
compname = "not compressed"
t = np.linspace( 0, duration, num_samples, endpoint = False )
D = amplitude * np.cos(2*np.pi*frequency*t)

amplitude = 30000
frequency = 293.7
duration = 2.5
fs = 44100
num_samples = duration * fs
num_channels = 1
sampwidth = 2
num_frames = num_samples
comptype = "NONE"
compname = "not compressed"
t = np.linspace( 0, duration, num_samples, endpoint = False )
D2 = amplitude * np.cos(2*np.pi*frequency*t)

amplitude = 30000
frequency = 349.2
duration = 1
fs = 44100
num_samples = duration * fs
num_channels = 1
sampwidth = 2
num_frames = num_samples
comptype = "NONE"
compname = "not compressed"
t = np.linspace( 0, duration, num_samples, endpoint = False )
F = amplitude * np.cos(2*np.pi*frequency*t)

amplitude = 30000
frequency = 349.2
duration = 2.5
fs = 44100
num_samples = duration * fs
num_channels = 1
sampwidth = 2
num_frames = num_samples
comptype = "NONE"
compname = "not compressed"
t = np.linspace( 0, duration, num_samples, endpoint = False )
F2 = amplitude * np.cos(2*np.pi*frequency*t)

amplitude = 30000
frequency = 329.6
duration = 1
fs = 44100
num_samples = duration * fs
num_channels = 1
sampwidth = 2
num_frames = num_samples
comptype = "NONE"
compname = "not compressed"
t = np.linspace( 0, duration, num_samples, endpoint = False )
E = amplitude * np.cos(2*np.pi*frequency*t)

amplitude = 30000
frequency = 329.6
duration = 2.5
fs = 44100
num_samples = duration * fs
num_channels = 1
sampwidth = 2
num_frames = num_samples
comptype = "NONE"
compname = "not compressed"
t = np.linspace( 0, duration, num_samples, endpoint = False )
E2 = amplitude * np.cos(2*np.pi*frequency*t)

amplitude = 30000
frequency = 392
duration = 1
fs = 44100
num_samples = duration * fs
num_channels = 1
sampwidth = 2
num_frames = num_samples
comptype = "NONE"
compname = "not compressed"
t = np.linspace( 0, duration, num_samples, endpoint = False )
G = amplitude * np.cos(2*np.pi*frequency*t)

amplitude = 30000
frequency = 440
duration = 1
fs = 44100
num_samples = duration * fs
num_channels = 1
sampwidth = 2
num_frames = num_samples
comptype = "NONE"
compname = "not compressed"
t = np.linspace( 0, duration, num_samples, endpoint = False )
A = amplitude * np.cos(2*np.pi*frequency*t)

amplitude = 30000
frequency = 466.2
duration = 1
fs = 44100
num_samples = duration * fs
num_channels = 1
sampwidth = 2
num_frames = num_samples
comptype = "NONE"
compname = "not compressed"
t = np.linspace( 0, duration, num_samples, endpoint = False )
Aplus = amplitude * np.cos(2*np.pi*frequency*t)

amplitude = 30000
frequency = 493.9
duration = 1
fs = 44100
num_samples = duration * fs
num_channels = 1
sampwidth = 2
num_frames = num_samples
comptype = "NONE"
compname = "not compressed"
t = np.linspace( 0, duration, num_samples, endpoint = False )
B = amplitude * np.cos(2*np.pi*frequency*t)

wav_file = wave.open( file, 'w' )
wav_file.setparams(( num_channels, sampwidth, fs, num_frames, comptype, compname ) )

for s in C:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in C:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in D:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in C:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in F:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in E2:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
	
for s in C:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in C:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in D:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in C:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in G:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in F2:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
	
for s in C:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in C:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in Cplus:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in A:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in F:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in E:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in D2:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
	
for s in Aplus:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in Aplus:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in A:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in F:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in G:
	wav_file.writeframes( struct.pack( 'h', int(s) ))
for s in F2:
	wav_file.writeframes( struct.pack( 'h', int(s) ))

wav_file.close()